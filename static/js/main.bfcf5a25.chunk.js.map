{"version":3,"sources":["images/log.png","App.js","reportWebVitals.js","index.js"],"names":["App","useState","question","setQuestion","history","uri","encodeURIComponent","image","document","getElementById","checkHistory","x","length","shift","push","className","id","src","logo","placeholder","onChange","e","target","value","onClick","match","style","transform","transition","fetch","then","response","json","innerHTML","JSON","stringify","magic","answer","window","alert","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"uLAAe,MAA0B,gC,eC+F1BA,MA1Ff,WAEE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAIIC,GAJJ,KAIU,0CADGC,mBAAmB,qCAI5BC,EAAQC,SAASC,eAAe,OAiC9BC,EAAe,SAACR,EAAUS,GACP,KAAnBP,EAAQQ,QACVR,EAAQS,QAENT,EAAQQ,OAAS,IACnBR,EAAQU,KAAK,CAACZ,EAAUS,KAe5B,OACF,qBAAKI,UAAU,aAAf,SAEI,sBAAKA,UAAU,SAAf,UAEE,8CAIC,qBAAKC,GAAG,MAAMC,IAAKC,IAEpB,qBAAKH,UAAU,cAAf,SACE,mBAAGC,GAAG,QAAN,+BAGD,uBAAOG,YAAY,kBAAkBC,SAzBrB,SAACC,GAClBlB,EAAYkB,EAAEC,OAAOC,UA0BrB,wBAAQP,GAAG,MAAMQ,QApEF,WAIbtB,EAASuB,MAAM,uBAGjBlB,EAAMmB,MAAMC,UAAY,oBACxBpB,EAAMmB,MAAME,WAAa,cAGzBC,MAAMxB,GACLyB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAEJxB,SAASC,eAAe,SAASwB,UAAYC,KAAKC,UAAUH,EAAKI,MAAMC,QAGvE3B,EAAaR,EAAU8B,EAAKI,MAAMC,QAElC9B,EAAMmB,MAAMC,UAAY,qBACxBpB,EAAMmB,MAAME,WAAa,kBAI3BpB,SAASC,eAAe,SAASwB,UAAY,2BA2C7C,oBAEA,wBAAQT,QAxBS,WACnBc,OAAOC,MAAMnC,IAuBX,2BC3ESoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1C,SAASC,eAAe,SAM1B+B,K","file":"static/js/main.bfcf5a25.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/log.81637688.png\";","import React, {useState} from 'react';\nimport logo from './images/log.png'\nimport './App.css';\n\n\nfunction App() {\n  //states for questions, and api response history\n  const [question, setQuestion] = useState('');\n  const [history, setHistory] = useState([]);\n\n  //api call parameters\n  let params = encodeURIComponent(\"Is today going to be a good day?\");\n  let uri = \"https://8ball.delegator.com/magic/JSON/\" + params;\n\n  //getting the 8 ball image for later targetting\n  let image = document.getElementById(\"img\")\n\n  const myFunction = () => {\n\n    //regex to make sure the questions has only letters, numbers, apostrophes,\n    //one consecutive white space, and a question mark\n    if (question.match(/^[A-Za-z'0-9 ]+[?]/)) {\n\n      //animating 8 ball when submit button is clicked\n      image.style.transform = 'rotateY(3.142rad)';\n      image.style.transition = '.2s ease-in';\n\n      //api call\n      fetch(uri)\n      .then(response => response.json())\n      .then(json => {\n        //displaying api response to end user\n        document.getElementById(\"query\").innerHTML = JSON.stringify(json.magic.answer);\n        //Function(line49)\n        //checking the history array for proper length\n        checkHistory(question, json.magic.answer);\n        //animating 8 ball to original position for repetitive use\n        image.style.transform = 'rotateY(-3.142rad)';\n        image.style.transition = '.2s ease-in';\n      }) \n    } else {\n      //user error handling if question parameters were not met (line22)\n      document.getElementById(\"query\").innerHTML = \"That wasn't a question.\";\n    } \n  };\n\n  //function that deletes a search history entry when array lenght \n  //reaches 10, otherwise it adds the latest question to the array\n  const checkHistory = (question, x) => {\n    if (history.length === 10) {\n      history.shift();\n    } \n    if (history.length < 10) {\n      history.push([question, x]);\n    }\n  };\n\n  //Function set the question to the value of the user input\n  const questionFunc = (e) => {\n      setQuestion(e.target.value);\n    };\n\n  //Alert to show the history, sorry I didn't make a modal :)\n  const historyAlert = () => {\n    window.alert(history);\n  };\n\n\n  return (\n<div className='background' >\n\n    <div className='parent'>\n\n      <h1>\n        Magic 8-Ball\n      </h1>\n\n       <img id='img' src={logo}/>\n\n      <div className='queryResult'>\n        <p id=\"query\">Hello Friend !!</p>\n      </div>\n\n       <input placeholder=\"Got a question?\" onChange={questionFunc}/>\n\n      <button id=\"btn\" onClick={myFunction}>Submit</button>\n\n      <button onClick={historyAlert}>History</button>       \n\n    </div>\n\n</div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}